######### Tell emacs this is a -*- Makefile -*- #######################
#   $Source: /afs/cs.cmu.edu/project/TCA/Master/ipc/etc/GNUmakefile.defs,v $
# $Revision: 2.15 $
#     $Date: 2011/08/16 16:03:11 $
#   $Author: reids $
#    $State: Exp $
#   $Locker:  $
#
# PROJECT:	Task Control Architecture.
#
# FILE:		GNUmakefile.defs
#
# DESCRIPTION:
#	This file should be included at the begining of the prototypical
#	Makefile.  It provides a set of "standard" and useful defines.
#
# Copyright (c) 2008, Carnegie Mellon University
#     This software is distributed under the terms of the 
#     Simplified BSD License (see ipc/LICENSE.TXT)
#
# HISTORY:
#
# $Log: GNUmakefile.defs,v $
# Revision 2.15  2011/08/16 16:03:11  reids
# Adding Python interface to IPC
#
# Revision 2.14  2009/01/19 00:49:49  reids
# Changed LIBS_Linux for newer OS
#
# Revision 2.13  2009/01/12 15:54:54  reids
# Added BSD Open Source license info
#
# Revision 2.12  2008/07/16 00:09:22  reids
# Updates for newer compiler gcc 4.x
#
# Revision 2.11  2003/03/11 23:23:08  trey
# added IPC_ALLOW_DISCONNECTED_EVENT_HANDLING flag
#
# Revision 2.10  2003/03/11 18:43:13  trey
# fixed problem that was causing gmake to try and use an install binary from /local/sgi/ under Linux
#
# Revision 2.9  2003/02/13 20:38:00  reids
# Updated to work under Solaris
#
# Revision 2.8  2002/06/25 21:21:52  reids
# Don't make with -g by default
#
# Revision 2.7  2002/06/25 16:29:07  reids
# Took out references to AFS and fixed the definition of CPPFLAGS
#
# Revision 2.6  2002/05/15 14:44:27  trey
# minor fixes
#
# Revision 2.5  2002/04/29 22:23:55  trey
# numerous small fixes
#
# Revision 2.4  2001/07/24 12:13:37  reids
# Changes to support compiling under RedHat 7.1 (kernel 2.4)
#
# Revision 2.3  2000/02/17 22:41:29  reids
# Fixed makefiles to better handle installing files on IRIX (using
#  /local/sgi/gnu/bin/install)
#
# Revision 2.2  2000/01/27 20:49:23  reids
# Changes for RedHat 6
#
# Revision 2.1.1.1  1999/11/23 19:07:32  reids
# Putting IPC Version 2.9.0 under local (CMU) CVS control.
#
# Revision 1.18  97/01/20  11:01:49  reids
# Added paths for tcl/tk to support comview and the new tview tools.
# 
# Revision 1.17  1996/05/07  16:47:06  rich
# Changes for clisp.
#
# Revision 1.16  1996/03/02  03:20:04  rich
# Options to use purify.  Use PURIFY=1 on the gmake command line.
#
# Revision 1.15  1996/02/12  01:09:25  rich
# TCA->tca.
#
# Revision 1.14  1996/02/12  00:53:25  rich
# Get VX works compile to work with GNUmakefiles.
#
# Revision 1.13  1996/02/11  21:34:33  rich
# Updated GNUmakefiles for faster complilation.  Use FAST_COMPILE=1 for
# routine recompiles.
#
# Revision 1.12  1996/02/10  23:34:44  rich
# Make lib_dep evaluate after overrides.
#
# Revision 1.11  1996/02/10  16:48:16  rich
# Add more warning messages to compiles.
#
# Revision 1.10  1996/01/08  21:11:30  rich
# Fixed problem with creating directories on afs.
#
# Revision 1.9  1995/12/17  20:20:24  rich
# Fixed debug flags.
#
# Revision 1.8  1995/12/15  01:20:08  rich
# Reduce size of the include path.
#
# Revision 1.7  1995/10/25  22:43:04  rich
# Fixed problem with using a non-afs directory on a machine with afs.
# This was caused by a new release of the afs program "fs".
#
# Revision 1.6  1995/08/05  18:10:15  rich
# Reordered dbmalloc library so that it works on linux.
#
# Revision 1.5  1995/07/26  20:40:34  rich
# Fixed ranlib of .so. files and flags for .cc files.
#
# Revision 1.4  1995/07/25  20:07:48  rich
# Changes for NeXT machine (3.0).
#
# Revision 1.3  1995/07/12  04:53:03  rich
# Release of 8.0.
#
# Revision 1.2  1995/07/10  16:15:09  rich
# Interm save.
#
# Revision 1.1  1995/07/08  17:50:22  rich
# Linux Changes.  Also added GNUmakefile.defs.
#
#
#############################################################################

.KEEP_STATE:

#############################################################################
# Site Configuration Macros
#############################################################################

PROJECT		= ipc
FTP_DIR		= $(INSTALL_DIR)/ftp
DBMALLOC_DIR	= /afs/cs/project/robocomp/xavier

#############################################################################
# Machine/OS configuration.
#############################################################################

# For most machines, this gets a string that can be used to determine
# the machine.
ifndef THIS_OS
THIS_OS := $(shell uname)
THIS_MACHINE := $(shell uname -m)
ifndef FAST_COMPILE
THIS_RELEASE := $(shell uname -r)
THIS_HOST := $(shell hostname)
endif
endif

#this is needed to distinquish SunOS from Solaris
ifndef FAST_COMPILE
ifeq ($(shell uname),SunOS) 
ifeq ($(sort 5.0 $(THIS_RELEASE)),5.0 $(THIS_RELEASE))
THIS_OS := Solaris
endif
endif
endif
ifeq ($(THIS_OS),CYGWIN32_NT)
THIS_OS := wnt
endif
ifeq ($(THIS_OS),CYGWIN_NT-5.1)
THIS_OS := wnt
THIS_RELEASE := 5.1
endif

# Compiling with the VX flag signals to compile for vxworks
ifdef VX
THIS_OS := vxworks
endif

PERL := perl

ifeq ($(THIS_OS),Linux)
LINUX_MAJOR_VERSION_CMD := $(PERL) -e '$$_ = shift @ARGV; ($$major,$$minor,$$patchlevel) = split(/\./,$$_,3); print "$$major.$$minor\n";'
# cut off patch level, keep only major and minor OS version numbers.
THIS_RELEASE := $(shell $(LINUX_MAJOR_VERSION_CMD) $(THIS_RELEASE))
endif

THIS_OS_BOTH := $(THIS_OS)-$(THIS_RELEASE)

#############################################################################
# Release configuration.
#############################################################################

VERSION_DEF = $(INSTALL_DIR)/src/ipcPriv.h
IPC_VERSION_MAJOR := $(shell awk '/VERSION_MAJOR/ {print $$3}' $(VERSION_DEF) )
IPC_VERSION_MINOR := $(shell awk '/VERSION_MINOR/ {print $$3}' $(VERSION_DEF) )
IPC_VERSION_MICRO := $(shell awk '/VERSION_MICRO/ {print $$3}' $(VERSION_DEF) )

#############################################################################

PROJECT_RELEASE_DIR	= 
VERSION_DIR	= ipc-$(IPC_VERSION_MAJOR).$(IPC_VERSION_MINOR)
PROJECT_DIR	= 

#############################################################################
# CVS configuration.
#############################################################################

ifndef FAST_COMPILE
CVS_BIN 	:= $(shell if (cat /usr/local/bin/cvs > /dev/null 2> /dev/null); then echo "/usr/local/bin"; else echo "/usr/misc/.cvs/bin"; fi )
CVSROOT 	= /afs/cs/project/TCA/Master
endif

# places where files live, relative to the makefile :
BDIR    = bin/$(THIS_OS_BOTH)
LDIR    = lib/$(THIS_OS_BOTH)
ODIR    = obj/$(THIS_OS_BOTH)
VODIR   = vxObj
SODIR   = sharedObj/$(THIS_OS_BOTH)
PWD 	:= $(shell /bin/pwd)

#############################################################################
# Standard directories
#############################################################################

PUBLIC_BIN_DIR		= $(INSTALL_DIR)/bin/$(THIS_OS_BOTH)
PUBLIC_INC_DIR 		= $(INSTALL_DIR)/include
PUBLIC_LIB_DIR		= $(INSTALL_DIR)/lib/$(THIS_OS_BOTH)
PUBLIC_LINT_DIR		= $(INSTALL_DIR)/lib/lint
PUBLIC_MAN_DIR		= $(INSTALL_DIR)/man/man
PUBLIC_DOC_DIR		= $(INSTALL_DIR)/doc

MODULE_INC_DIR		= $(PUBLIC_INC_DIR)/$(MODULE)
MODULE_LIB_DIR		= $(PUBLIC_LIB_DIR)/$(MODULE)
MODULE_LINT_DIR		= $(PUBLIC_LINT_DIR)/$(MODULE)
MODULE_DOC_DIR		= $(PUBLIC_DOC_DIR)/$(MODULE)

INSTALL_OSF1	= installbsd

ifneq ($(findstring $(THIS_OS),$(IRIX_TYPES)),)
FOUND_GNU_INSTALL := $(shell ls /local/sgi/gnu/bin/install 2>/dev/null | grep -v "not found" | head -1)
ifneq ($(FOUND_GNU_INSTALL),)
INSTALL_$(THIS_OS) = /local/sgi/gnu/bin/install
endif
endif

INSTALL		= $(INSTALL_$(THIS_OS))
ifeq '$(INSTALL)' ""
INSTALL		= install
endif

ifneq ($(THIS_OS),sun4u)
INS_C_FLAG	= -c
endif

INS_BIN_FLAGS	= -m 555
INS_INC_FLAGS	= $(INS_C_FLAG) -m 444
INS_LIB_FLAGS	= -m 666
INS_LINT_FLAGS	= -m 444
INS_MAN_FLAGS	= $(INS_C_FLAG) -m 444
INS_DOC_FLAGS	= $(INS_C_FLAG) -m 444
INS_FTP_FLAGS	= -m 444

CC		= gcc
CCC		= g++
ifneq ($(THIS_OS),Solaris)
AR		= ar
else
AR		= /usr/ccs/bin/ar
endif
RANLIB		= ranlib
IRIX_TYPES      = IRIX IRIX64
OS_NO_RANLIB	= $(IRIX_TYPES) Solaris
ifneq ($(findstring $(THIS_OS),$(OS_NO_RANLIB)),)
NO_RANLIB	= TRUE
endif
ifdef NO_RANLIB
RANLIB		= echo
endif

LINT		= lint
ifneq ($(THIS_OS),wnt)
RM		= /bin/rm -rf
else
RM		= rm -rf
endif
LD		= ld
LD_SHARED_Solaris= ld -G -dy
LD_SHARED_SunOS	= ld -assert pure-text
LD_SHARED_Linux	= ld -G -dy
LD_SHARED_wnt	= gcc -shared
LD_SHARED	= $(LD_SHARED_$(THIS_OS))
CP		= /bin/cp
CHMOD		= /bin/chmod

ifneq ($(findstring $(THIS_OS),$(IRIX_TYPES)),)
AR		= /usr/bin/ar
CC		= CC -n32
CCC		= CC -n32
endif

MKDIR           = mkdir -p

#############################################################################
# Program Configuration Macros
#############################################################################

#
# Create the flags sent to the C compiler.  Note the following can be
# used on the command line to gmake:
# `DEBUG=DEBUG' : turns on cflags for debugging
# `DEBUG=TEST'  : turn on compilation for test purposes.
# `CFLAG_EXT="-yourFlags"' : can set your own flags.
# You can also override the default DEFINES with DEFINES="-DMYDEFINE"
#

TCL_INC_DIR = /afs/cs/local/tcl/common/beta/include
TCL_LIB_DIR = /afs/cs/local/tcl/@sys/beta/lib
TK_LIB_DIR  = /afs/cs/local/tk/@sys/beta/lib

INC_PATH_OSF1	= -I/usr/local/include
INC_PATH_Mach	= 
INC_PATH_SunOS	= -I/usr/local/include -I/usr/openwin/include
INC_PATH_Solaris	= -I/usr/local/include -I/usr/openwin/include
INC_PATH_Linux	= -I/usr/include/bsd
INC_PATH_DBMALLOC= -I$(DBMALLOC_DIR)/include
INC_PATH	= -I. -I$(PUBLIC_INC_DIR)  \
		$(INC_PATH_$(THIS_OS)) $(INC_PATH_$(DBMALLOC))

DEFINES		= 

THIS_RELEASE := $(shell uname -r)
ifeq ($(THIS_OS),Linux)
# See if this is at release 2.0, or higher
ifeq ($(sort 2.0 $(THIS_RELEASE)),2.0 $(THIS_RELEASE))
DEFINES += -DREDHAT_52
endif
ifeq ($(sort 2.2 $(THIS_RELEASE)),2.2 $(THIS_RELEASE))
DEFINES += -DREDHAT_6
endif
ifeq ($(sort 2.4 $(THIS_RELEASE)),2.4 $(THIS_RELEASE))
DEFINES += -DREDHAT_71
endif
endif

CPPFLAGS	= $(INC_PATH) $(DEFINES)
CFLAGSS_STRIP	= -Xlinker -s
STRIP_BY_DEFAULT= 
ifneq (,$(findstring $(THIS_MACHINE),$(STRIP_BY_DEFAULT)))
STRIP		= STRIP
endif

CFLAGS_RISC	= -G 0
CFLAGS_Intel	= -m486 -fno-builtin -gstabs
CFLAGS_i486	= -m486
CFLAGS_i586	= -m486
CFLAGS_alpha	= 
CFLAGS_sun4c	= 
CFLAGS_sun4m	= 
CFLAGS_Sparc	= 
CFLAGS_IP22	= -g3
CFLAGS_		= 
CFLAGSD_	= -O2
CFLAGSD_NONE	= -O2
CFLAGSD_DEBUG	= -g -DDEBUG
CFLAGSD_DEBUG3	= -ggdb3 -DDEBUG
CFLAGSD_TEST	= -g -DTEST -O2
CFLAGSD_PROF	= -pg -O2 -static
CFLAGSM_DBMALLOC= -DDBMALLOC
CFLAGS_gcc	= -Wall -Wstrict-prototypes -Wnested-externs -Wmissing-prototypes -Wmissing-declarations
#CFLAGS_cc	= -ansi -fullwarn
CFLAGS_cc	= -ansi

CFLAGS		= $(CFLAGS_$(CC)) $(CFLAGSD_$(DEBUG)) \
		  $(CFLAGS_$(THIS_MACHINE)) \
		  $(CFLAGSM_$(DBMALLOC)) $(CFLAGS_EXT)

CCFLAGS	= $(INC_PATH) $(DEFINES) -Wall $(CFLAGSD_$(DEBUG)) \
		$(CFLAGS_$(THIS_MACHINE)) $(CFLAGSM_$(DBMALLOC)) $(CFLAGS_EXT)

CFLAGS_LISP_Mach	= -DALLEGRO
CFLAGS_LISP_Linux	= -DCLISP
CFLAGS_LISP_Solaris	= -DALLEGRO
CFLAGS_LISP_SunOS	= -DALLEGRO
CFLAGS_LISP = -DLISP $(CFLAGS_LISP_$(THIS_OS))

LIB_PATH_Mach	= 
LIB_PATH_Linux	= -L$(BASE_DIR)/$(LDIR) -L/lib -L/usr/X11R6/lib
LIB_PATH_Solaris= -L$(BASE_DIR)/$(LDIR) -L/usr/local/lib -L/usr/openwin/lib
LIB_PATH_SunOS	= -L$(BASE_DIR)/$(LDIR) -L/usr/local/lib -L/usr/openwin/lib
LIB_PATH_DBMALLOC= -L$(DBMALLOC_DIR)/lib
LIB_PATH	= -L$(PWD) -L$(LDIR) -L$(PUBLIC_LIB_DIR) \
		-L$(MODULE_LIB_DIR) -L$(TCL_LIB_DIR) -L$(TK_LIB_DIR) \
		$(LIB_PATH_$(THIS_OS))\
		$(LIB_PATH_$(DBMALLOC))

LDFLAGS 	= $(LIB_PATH)
LIBS_DBMALLOC 	= -ldbmalloc
ifneq ($(sort 2.7 $(THIS_RELEASE)),2.7 $(THIS_RELEASE))
LIBS_Linux	= -lc
endif
ifneq ($(sort 2.6 $(THIS_RELEASE)),2.6 $(THIS_RELEASE))
LIBS_Linux	=  -lbsd -lc
endif
LIBS_Solaris	=  -lsocket -lnsl
LIBS_wnt	=  -lwsock32
LIBRARIES	= -lipc $(LIBS_$(DBMALLOC)) $(LIBS_$(THIS_OS))
DYN_LIBS_Solaris=  -ldl
DYN_LIBRARIES	= $(DYN_LIBS_$(THIS_OS))
CPP_LIBRARIES	= $(LIBRARIES) 

#Create a variable with the path to the libraries for use in depends.
LIBDEP		= $(foreach lib, $(patsubst -l%, lib%.a, $(LIBRARIES)),\
			$(foreach dir, $(patsubst -L%, %,$(LIB_PATH)),\
				$(wildcard $(dir)/$(lib))))

LINTFLAGS	= -abch

ARFLAGS		= cr

#
# So is the VX works version.
#

#
# Choose one by compiling with VX=<xx> flag
#

ifeq ($(VX),M68K)
#For M68K
WORKSHOME = /usr/vxworks/vx5.2
VX_GCC_HOME = /usr/vxworks/gnu/sun4.68k
VX_GCC_EXEC_PREFIX = $(VX_GCC_HOME)/lib/gcc-lib/m68k-wrs-vxworks/cygnus-2.2.3.1/
VX_CC = $(VX_GCC_HOME)/bin/cc68k -B$(VX_GCC_EXEC_PREFIX)
VX_LD = $(VX_GCC_HOME)/bin/ld68k
VX_AR = $(VX_GCC_HOME)/bin/ar68k
VX_RANLIB = $(VX_GCC_HOME)/bin/ranlib68k
VX_FAMILY = MC680X0
VX_CPU = MC68030
VX_INC_GNU = -I$(VX_GCC_HOME)/lib/gcc-include
VX_CFLAGS_ARCH =

else
ifeq ($(VX),PPC)
#For PPC
WORKSHOME = 
VX_GCC_EXEC_PREFIX = 
VX_CC = 
VX_LD = 
VX_AR = 
VX_RANLIB = 
VX_FAMILY = 
VX_CPU = 
VX_INC_GNU = 
VX_CFLAGS_ARCH = 

else
ifeq ($(VX),R6K)
#For R6K (R6000)
WORKSHOME = 
VX_GCC_EXEC_PREFIX = 
VX_CC = 
VX_LD = 
VX_AR = 
VX_RANLIB = 
VX_FAMILY = 
VX_CPU = 
VX_INC_GNU = 
VX_CFLAGS_ARCH = 

else
ifeq ($(VX),CPCI)
#For Compact PCI
VX_HOME		= /afs/cs.cmu.edu/project/marsrover/software/external
WORKSHOME	= $(VX_HOME)/tor/target
VX_GCC_HOME	= $(VX_HOME)/Linux/bin
VX_CC		= $(VX_GCC_HOME)/i586-wrs-vxworks-gcc
VX_LD		= $(VX_GCC_HOME)/i586-wrs-vxworks-ld
VX_AR		= $(VX_GCC_HOME)/i586-wrs-vxworks-ar
VX_RANLIB	= $(VX_GCC_HOME)/i586-wrs-vxworks-ranlib
VX_FAMILY	= 
VX_CPU		= I80486
VX_CFLAGS_ARCH	= 
endif
endif
endif
endif

ifeq ($(VX),"")
RANLIB = $(VX_RANLIB)
endif

VX_INC = -I. -I$(WORKSHOME)/h -I/usr/gnu/lib/gcc-include -I$(PUBLIC_INC_DIR)

VX_LIB = -L. -L$(WORKSHOME)/lib

VX_CDEBUG= -O -g

VX_CFLAGS= $(VX_CDEBUG) -DVXWORKS -DCPU_FAMILY=$(VX_FAMILY) -DCPU=$(VX_CPU) \
	$(VX_INC)

COMPILE.vx=$(VX_CC) $(VX_CFLAGS) -c
LINK.vx=$(VX_LD) -r $(VX_LIB)
ifdef PURIFY
DBMALLOC = 
LINK.c= purify $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) 
endif

# uncomment the following to allow event handling while not connected to central
# (this feature is currently experimental)

# IPC_ALLOW_DISCONNECTED_EVENT_HANDLING := 1

ifneq (,$(IPC_ALLOW_DISCONNECTED_EVENT_HANDLING))
  CFLAGS += -DIPC_ALLOW_DISCONNECTED_EVENT_HANDLING
endif

#############################################################################
# Default to no src files.
#############################################################################

INCS		=
PRIVATE_INCS	=
SRCS		=
MANS		= 
DOCS		=
MISC		=

# Files to be removed by 'make clean' and 'make realclean'
DELETES		= core \
	  	  $(patsubst %,$(BDIR)/%,$(PUBLIC_BINS))\
		  $(patsubst %,$(LDIR)/%,$(PUBLIC_LIBS))\
		  $(PUBLIC_LINTS) \
		  $(MODULE_LIBS) $(MODULE_LINTS) $(PRIVS) make.state \
                  $(ODIR) $(BDIR) $(LDIR)
